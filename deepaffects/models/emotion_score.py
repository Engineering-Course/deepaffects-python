# coding: utf-8

"""
    DeepAffects

    OpenAPI Specification of DeepAffects audio APIs
"""

from pprint import pformat
from six import iteritems
import re


class EmotionScore(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, happy=None, angry=None, sad=None, disgust=None, pleasant=None, neutral=None, fear=None):
        """
        EmotionScore - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'happy': 'float',
            'angry': 'float',
            'sad': 'float',
            'disgust': 'float',
            'pleasant': 'float',
            'neutral': 'float',
            'fear': 'float'
        }

        self.attribute_map = {
            'happy': 'Happy',
            'angry': 'Angry',
            'sad': 'Sad',
            'disgust': 'Disgust',
            'pleasant': 'Pleasant',
            'neutral': 'Neutral',
            'fear': 'Fear'
        }

        self._happy = happy
        self._angry = angry
        self._sad = sad
        self._disgust = disgust
        self._pleasant = pleasant
        self._neutral = neutral
        self._fear = fear

    @property
    def happy(self):
        """
        Gets the happy of this EmotionScore.

        :return: The happy of this EmotionScore.
        :rtype: float
        """
        return self._happy

    @happy.setter
    def happy(self, happy):
        """
        Sets the happy of this EmotionScore.

        :param happy: The happy of this EmotionScore.
        :type: float
        """

        self._happy = happy

    @property
    def angry(self):
        """
        Gets the angry of this EmotionScore.

        :return: The angry of this EmotionScore.
        :rtype: float
        """
        return self._angry

    @angry.setter
    def angry(self, angry):
        """
        Sets the angry of this EmotionScore.

        :param angry: The angry of this EmotionScore.
        :type: float
        """

        self._angry = angry

    @property
    def sad(self):
        """
        Gets the sad of this EmotionScore.

        :return: The sad of this EmotionScore.
        :rtype: float
        """
        return self._sad

    @sad.setter
    def sad(self, sad):
        """
        Sets the sad of this EmotionScore.

        :param sad: The sad of this EmotionScore.
        :type: float
        """

        self._sad = sad

    @property
    def disgust(self):
        """
        Gets the disgust of this EmotionScore.

        :return: The disgust of this EmotionScore.
        :rtype: float
        """
        return self._disgust

    @disgust.setter
    def disgust(self, disgust):
        """
        Sets the disgust of this EmotionScore.

        :param disgust: The disgust of this EmotionScore.
        :type: float
        """

        self._disgust = disgust

    @property
    def pleasant(self):
        """
        Gets the pleasant of this EmotionScore.

        :return: The pleasant of this EmotionScore.
        :rtype: float
        """
        return self._pleasant

    @pleasant.setter
    def pleasant(self, pleasant):
        """
        Sets the pleasant of this EmotionScore.

        :param pleasant: The pleasant of this EmotionScore.
        :type: float
        """

        self._pleasant = pleasant

    @property
    def neutral(self):
        """
        Gets the neutral of this EmotionScore.

        :return: The neutral of this EmotionScore.
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """
        Sets the neutral of this EmotionScore.

        :param neutral: The neutral of this EmotionScore.
        :type: float
        """

        self._neutral = neutral

    @property
    def fear(self):
        """
        Gets the fear of this EmotionScore.

        :return: The fear of this EmotionScore.
        :rtype: float
        """
        return self._fear

    @fear.setter
    def fear(self, fear):
        """
        Sets the fear of this EmotionScore.

        :param fear: The fear of this EmotionScore.
        :type: float
        """

        self._fear = fear

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmotionScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
